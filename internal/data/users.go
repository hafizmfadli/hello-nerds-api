package data

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"errors"
	"strconv"
	"strings"
	"time"

	"github.com/go-sql-driver/mysql"
	"github.com/hafizmfadli/hello-nerds-api/internal/validator"
	"golang.org/x/crypto/bcrypt"
)

// Define a Level type to represent the severity level for a log entry
type CheckoutVariety int8

// Initialize constants which represent a specific severity level. We use the iota
// keyword as a shortcut to assign successive integer values to the constants
const (
	GuestCheckout CheckoutVariety = iota
	MemberCheckout
)

// custom ErrDuplicateEmail error
var (
	ErrDuplicateEmail = errors.New("duplicate email")
)

// Declare a new AnonymousUser variable.
var AnonymousUser = &User{}

type User struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Password  password  `json:"-"`
	Activated bool      `json:"activated"`
}

// Check if a User instance is the AnonymousUser
func (u *User) IsAnonymous() bool {
	return u == AnonymousUser
}

type password struct {
	plainText *string
	hash []byte
}

// The Set() method calculates the bcrypt hash of a plaintext password, and
// stores both the hash and the plaintext version in the struct
func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}
	p.plainText = &plaintextPassword
	p.hash = hash

	return nil
}

// Matches() method checks whether the provided plaintext password matches
// the hashed password stored in the struct, returning true if match and false
// otherwise
func (p *password) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}

func ValidateEmail (v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRX), "email", "must be a valid ")
}

func ValidatePasswordPlaintext (v *validator.Validator, password string) {
	v.Check(password != "", "password", "must be provided")
	v.Check(len(password) >= 8, "password", "must be at least 8 bytes long")
	v.Check(len(password) <= 72, "password", "must not be more than 72 bytes long")
}

func ValidateConfirmPassword (v *validator.Validator, password, confirmPassword string) {
	v.Check(password == confirmPassword, "confirm_password", "must be same as password")
}

func ValidateUser(v *validator.Validator, user *User) {
	v.Check(user.FirstName != "", "first_name", "must be provided")
	v.Check(len(user.FirstName) >= 3, "first_name", "must be at least 3 characters long")
	v.Check(len(user.FirstName) <= 30, "first_name", "must not be more than 30 characters long")

	v.Check(user.LastName != "", "last_name", "must be provided")
	v.Check(len(user.LastName) >= 3, "last_name", "must be at least 3 characters long")
	v.Check(len(user.LastName) <= 30, "last_name", "must not be more than 30 characters long")

	ValidateEmail(v, user.Email)

	if user.Password.plainText != nil {
		ValidatePasswordPlaintext(v, *user.Password.plainText)
	}

	// If the password hash is ever nil, this will be due to a logic error in our
	// codebase (probably because we forgot to set a password for the user). It's a
	// useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation map we
	// raise a panic instead.
	if user.Password.hash == nil {
		panic("missing password hash for user")
	}
}

func ValidateCheckoutVariety(v *validator.Validator, checkoutVariety CheckoutVariety) {
	v.Check((checkoutVariety == GuestCheckout) || (checkoutVariety == MemberCheckout), "checkout_type", `must be GuestCheckout 
	or MemberCheckout`)
}

func ValidateShippingVariety(v *validator.Validator, addressVariety ShippingAddressVariety){
	v.Check((addressVariety == ToNewAddress) || (addressVariety == ToExistingAddress), "address_variety", `must be to
	existing address or new address`)
}

func ValidateCheckoutAndAddressVarietyPair(v *validator.Validator, checkoutVariety CheckoutVariety, addressVariety ShippingAddressVariety){
	v.Check(!((checkoutVariety == GuestCheckout) && (addressVariety == ToExistingAddress)), "address_variety", "guest checkout must be created new shipping address")
}

type UserModel struct {
	DB *sql.DB
}

// Insert an new record in the database for the user. Note that the id, created_at, and activated
// field are all automatically generated by our database.
func (m UserModel) Insert(user *User) error {
	query := `
		INSERT INTO users (first_name, last_name, email, password_hash)
		VALUES (?, ?, ?, ?)`
	
	args := []interface{}{user.FirstName, user.LastName, user.Email, user.Password.hash}

	ctx, cancel := context.WithTimeout(context.Background(), 3 * time.Second)
	defer cancel()

	result, err := m.DB.ExecContext(ctx, query, args...)
	if err != nil {
		if mysqlErr, ok := err.(*mysql.MySQLError); ok {
			if mysqlErr.Number == 1062 && strings.Contains(mysqlErr.Message, "users.email"){
				return ErrDuplicateEmail
			}
		}else {
			return err
		}
	}

	id, err := result.LastInsertId()
	if err != nil {
		return err
	}

	user.ID = id
	user.CreatedAt = time.Now()
	user.Activated = false

	return nil
}

// GetByEmail retrieve the user details from the database based on the user's email address.
func (m UserModel) GetByEmail(email string) (*User, error) {
	query := `
		SELECT id, created_at, first_name, last_name, email, password_hash, activated
		FROM users
		WHERE email = ?`
	
	var user User

	ctx, cancel := context.WithTimeout(context.Background(), 3 * time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, email).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.FirstName,
		&user.LastName,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
	)

	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}

	return &user, nil
}

// Update the details for a specific user.
func (m UserModel) Update (user *User) error {
	query := `
		UPDATE users
		SET first_name = ?, last_name = ?, email = ?, password_hash = ?, activated = ?
		WHERE id = ?`
	
	args := []interface{}{
		user.FirstName,
		user.LastName,
		user.Email,
		user.Password.hash,
		user.Activated,
		user.ID,
	}

	ctx, cancel := context.WithTimeout(context.Background(), 3 * time.Second)
	defer cancel()

	_, err := m.DB.ExecContext(ctx, query, args...)
	if err != nil {
		if mysqlErr, ok := err.(*mysql.MySQLError); ok {
			if mysqlErr.Number == 1062 && strings.Contains(mysqlErr.Message, "users.email"){
				return ErrDuplicateEmail
			}
		}else {
			switch {
			case errors.Is(err, sql.ErrNoRows):
				return ErrEditConflict
			default:
				return err
			}
		}
	}

	return nil
}

func (m UserModel) GetForToken(tokenScope, tokenPlaintext string) (*User, error) {
	// Calculate the SHA-256 hash of the plaintext token provided by the client.
	// Remember that this returns a byte *array* with length 32, not a slice.
	tokenHash := sha256.Sum256([]byte(tokenPlaintext))

	query := `
		SELECT users.id, users.created_at, users.first_name, users.last_name, users.email, users.password_hash, users.activated
		FROM users
		INNER JOIN tokens
		ON users.id = tokens.user_id
		WHERE tokens.hash = ?
		AND tokens.scope = ?
		AND tokens.expiry > ?`
	
	args := []interface{}{tokenHash[:], tokenScope, time.Now()}

	var user User

	ctx, cancel := context.WithTimeout(context.Background(), 3 * time.Second)
	defer cancel()

	err := m.DB.QueryRowContext(ctx, query, args...).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.FirstName,
		&user.LastName,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
	)

	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}

	return &user, nil
}

// Checkout for checkout product.
func (m UserModel) Checkout(shippingAddress *ShippingAddress, addressVariety ShippingAddressVariety, checkoutVariety CheckoutVariety, 
	existingShippingAddressId int64, 
	carts []*Cart, userID interface{}) (error) {
	
	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Minute)
	defer cancel()

	// BEGIN transactions
	tx, err := m.DB.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	var userId interface{}

	// Check user checkout variety
	if checkoutVariety == GuestCheckout {
		userId = nil
	} else if checkoutVariety == MemberCheckout {
		userId = userID
	}
	
	var shippingAddressId int64

	// Ship to a new address
	if addressVariety == ToNewAddress {

		// Create a new row in the shipping_address table
		result, err := tx.ExecContext(ctx, `INSERT INTO shipping_address(email, first_name, last_name, addresses, postal_code, 
		province_id, city_id, district_id, subdistrict_id, phone, user_id) VALUES (?,?,?,?,?,?,?,?,?,?,?) `, 
		shippingAddress.Email, shippingAddress.FirstName, shippingAddress.LastName, shippingAddress.Addresses, 
		shippingAddress.PostalCode, shippingAddress.ProvinceID, shippingAddress.CityID, shippingAddress.DistrictID, 
		shippingAddress.SubdistrictID, shippingAddress.Phone, userId)
		
		if err != nil {
			return err
		}
		
		// use shipping address id that just have created
		shippingAddressId, err = result.LastInsertId()
		if err != nil {
			return err
		}

	}else if addressVariety == ToExistingAddress {
		// use exisiting shipping address id
		shippingAddressId = existingShippingAddressId
	}


	// Create a new row in the orders table
	result, err := tx.ExecContext(ctx, `INSERT INTO orders(user_id, shipping_address_id, is_paid, payment_deadline, total_price) VALUES(?,?,?,?,?)`,
								userId, shippingAddressId, false, time.Now().Add(24 * time.Hour), 0)
	
	if err != nil {
		return err
	}

	orderId, err := result.LastInsertId()
	if err != nil {
		return err
	}

	var totalOrderPrice int64
	for _, cart := range carts {
		// Confirm that book stock is enough for the order.
		// And perform exclusive lock
		var enough bool
		var bookPrice int64
		if err = tx.QueryRowContext(ctx, "SELECT quantity >= ?, price FROM updated_edited ue WHERE ue.id = ? FOR UPDATE", cart.Quantity, 
		cart.UpdatedEditedID).Scan(&enough, &bookPrice); err != nil {
			if err == sql.ErrNoRows {
				return ErrRecordNotFound
			}
			return err
		}

		if !enough {
			return ErrNotEnoughStock
		}

		// Substract book stock with quantity book that user will buy
		_, err = tx.ExecContext(ctx, "UPDATE updated_edited SET quantity = quantity - ? WHERE id = ?", cart.Quantity, cart.UpdatedEditedID)
		if err != nil {
			return err
		}

		// Insert a row in order_items that point to current order
		_, err = tx.ExecContext(ctx, "INSERT INTO order_items(order_id, updated_edited_id, quantity, total_price) VALUES(?,?,?,?)", 
						orderId, cart.UpdatedEditedID, cart.Quantity, cart.Quantity * bookPrice)

		if err != nil {
			return err
		}

		// Sum to total order price
		totalOrderPrice += cart.Quantity * bookPrice
	}

	// Update order total price
	_, err = tx.ExecContext(ctx, "UPDATE orders SET total_price = ? WHERE id = ?", totalOrderPrice, orderId)
	if err != nil {
		return err
	}

	// Commit the transaction.
	if err = tx.Commit(); err != nil {
		return err
	}
	
	return nil
}

func (m UserModel) CheckoutV2(shippingAddress *ShippingAddress, addressVariety ShippingAddressVariety, checkoutVariety CheckoutVariety, 
	existingShippingAddressId int64, 
	carts []*Cart, userID interface{}) (error){
		// prepare book id and book quantity for each book in csv format
		var bookIds string
		var bookQuantities string
		l := len(carts)
		for i := 0; i < l; i++ {
			bookId := strconv.Itoa(int(carts[i].UpdatedEditedID))
			bookIds += bookId

			bookQuantity := strconv.Itoa(int(carts[i].Quantity))
			bookQuantities += bookQuantity

			if i != (l - 1) {
				bookIds += ","
				bookQuantities += ","
			}
		}

		ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
		defer cancel()

		_, err := m.DB.ExecContext(ctx, `call checkout_v5(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, bookIds, bookQuantities, shippingAddress.Email, 
		shippingAddress.FirstName, shippingAddress.LastName, shippingAddress.Addresses, shippingAddress.PostalCode, shippingAddress.ProvinceID,
		shippingAddress.CityID, shippingAddress.DistrictID, shippingAddress.SubdistrictID, shippingAddress.Phone, userID, checkoutVariety, 
		addressVariety,existingShippingAddressId)
		if err != nil {
			if mysqlErr, ok := err.(*mysql.MySQLError); ok {
				if mysqlErr.Number == 1644 && strings.Contains(mysqlErr.Message, "Not enough stock"){
					return ErrNotEnoughStock
				}
			}else {
				return err
			}
		}

		return nil
	}